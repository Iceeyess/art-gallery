version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - static_volume:/app/static  # Монтируем статические файлы в общий том
      - media:/app/media  # Media
    env_file: ".env.server"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network

  db:
    image: postgres:latest
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: artgallery
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: qwerty12345
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app-network

  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]  # Команда для проверки состояния
      interval: 30s  # Интервал между проверками (увеличено с 5s до 30s)
      timeout: 10s   # Таймаут для выполнения команды (увеличено с 5s до 10s)
      retries: 5     # Количество попыток перед пометкой контейнера как "unhealthy"
      start_period: 10s  # Время на запуск Redis перед началом проверок
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  celery:
    build: .
    command: celery -A config worker -l INFO
    volumes:
      - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=artgallery
      - DB_USER=postgres
      - DB_PASSWORD=qwerty12345
      - DB_HOST=db
      - DB_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt:/etc/letsencrypt
      - static_volume:/app/static  # Монтируем общий том со статическими файлами
      - media:/app/media
    depends_on:
      - web
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  static_volume:  # Общий том для статических файлов
  media:  # Том для медиафайлов

networks:
  app-network:
    driver: bridge